#!/usr/bin/env python3

#My student ID wrapped enough times to make it 128bits

#Rijndael S-Box
#Taken from Page number 16 from FIPS197
sbox = [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

#RCON taken from AES wikipedia
rcon = [
        0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
        0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
        0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
        0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
        0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
        0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
        0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
        0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
        0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
        0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
        0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
        0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
        0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
        0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
        0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
        0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
]

#SBOX_INV taken from FIPS197 page: 22
sbox_inv = [
        0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
        0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
        0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
        0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
        0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
        0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
        0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
        0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
        0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
        0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
        0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
        0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
        0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
        0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
        0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
]



#Static polynomial a(x) is the mixColumns polynomial take from page: 17
A_X = [[0x03, 0x01, 0x01, 0x02], [0x01,0x01,0x02,0x03],[0x01,0x02,0x03,0x01],[0x02,0x03,0x01,0x01]]
#Static polynomial A^-1(x) is the inverse mixColumns polynomial taken from page: 23
B_X = [[0x0b, 0x0d, 0x09, 0x0e],[0x0d, 0x09, 0x0e, 0x0b],[0x09, 0x0e, 0x0b, 0x0d],[0x0e, 0x0b, 0x0d, 0x09]]


#This function performs the multiplication for the mixColumns and inverseMixColumns function in the
#galois field.
def fieldMult(a, b):
    p = 0
    for c in range(8):
        if b & 1:
            p ^= a
        a <<= 1
        if a & 0x100:
            a ^= 0x11b
        b >>= 1
    return p



#addRoundKey function, takes in the current state as a list and the roundedKey as a list, and xors them together
def addRoundKey(state, rKey):
    for i in range(len(rKey)):
        state[i] ^= rKey[i]

    return state



#Singular mix for a column, takes in a column vector and peforms matrix multiplication on the static polynomial
#a(x)
#FIPS: 
def Mix(column):
    new_col = [0 for _ in range(4)]
    for k in range(0,4):
        for j, entry in enumerate(column):
            val = A_X[3-k][j]
            res = int(hex(fieldMult(entry,val))[2:], 16)
            new_col[k] ^= res

    return new_col

#Singular mix for a column but inversed, takes in a column vector and peforms matrix multiplication on the static polynomial b(x)
#FIPS: 23
def InvMix(column):
    new_col = [0 for _ in range(4)]
    for k in range(0,4):
        for j, entry in enumerate(column):
            val = B_X[3-k][j]
            res = int(hex(fieldMult(entry,val))[2:], 16)
            new_col[k] ^= res

    return new_col

#Generates the column vectors to be used by the singular mix functions, and then calls the singular mix function for each column vector generated
def MixColumns(state):
    global A_X
    new_matrix = [0 for x in range(len(state))]
    for i in range(0,4):
        #for each column
        col_vector = state[i*4:i*4+4]
        new_matrix[i*4:i*4+4] = Mix(col_vector) 

    return new_matrix

#Generates the column vectors to be used by the singular inverse mix functionm and then calls the singular inverse nix function for each of the column vectors generated
def InvMixColumns(state):
    global B_X
    new_matrix = [0 for x in range(len(state))]
    for i in range(0,4):
        #for each column
        col_vector = state[i*4:i*4+4]
        new_matrix[i*4:i*4+4] = Mix(col_vector) 

    return new_matrix

#Inverse shift rows according to the textbook
#FIPS: 21
def InvShiftRows(state):
    state[5], state[9], state[13], state[1] = state[1], state[5], state[9], state[13] 
    state[10], state[14], state[2], state[6] = state[2], state[6], state[10], state[14] 
    state[15], state[3], state[7], state[11] = state[3], state[7], state[11], state[15]
    return state

#shifts rows according to the textbook
#FIPS: 17
def ShiftRows(state):
    state[1], state[5], state[9], state[13] = state[5], state[9], state[13], state[1]
    state[2], state[6], state[10], state[14] = state[10], state[14], state[2], state[6]
    state[3], state[7], state[11], state[15] = state[15], state[3], state[7], state[11]
    return state

#For the corresponding value in the state array, substitutes its corresponding value from the S_BOX
#Taken from Page-15 of the FIPS197
def SubBytes(state):
    sub_state = []
    for i, entry in enumerate(state):
        sub_state.append(sbox[entry])
    
    return sub_state

#Same as subbytes but for the inverse s_box
#FIPS: 22
def InvSubBytes(state):
    sub_state = []
    for i, entry in enumerate(state):
        sub_state.append(sbox_inv[entry])
    
    return sub_state

#Same as subbytes but for a 4 byte word instead of the state array, this is used for the key expansion function
def SubWord(word):
    newWord = []
    for i in range(0, len(word), 2):
        newWord.append(sbox[int(word[i:i+2], 16)])


    return hexstring(newWord) 

#returns a hexstring of the word list passed to it, used for debugging to see hex representations of the 
#word
def hexstring(word):
    return("".join([hex(entry)[2:].zfill(2) for entry in word]))



#flattens the key from the key list in order to be XORed with any of the hex values
def roundKey(keyList):
    flatList = []
    for key in keyList:
        for i in range(0,len(key), 2):
            flatList.append(int(key[i:i+2],16))
   
    return flatList 


#Key Expansion routine, used to generate the key schedule according to the Rijndael key scheduling algorithm
#FIPS: 20
def KeyExpansion(key):
    newKey = []
    for i in range(0, len(key), 4):
        newKey.append(hexstring(key[i:i+4]))

    keySize = len(newKey)
    while keySize < 44:
        temp = newKey[-1]
        if keySize % 4 == 0:
            temp = temp[2:] + temp[:2]
            temp = SubWord(temp)
            rconnum = hex(rcon[keySize // 4])[2:]
            if len(rconnum) < 2:
                rconnum = rconnum.ljust(7, '0')
                rconnum = rconnum.rjust(8,'0')
            else:
                rconnum = rconnum.ljust(8, '0')

            temp = int(temp, 16) ^ int(rconnum, 16) 
            temp = hex(temp)[2:]
            
        
        toAdd = int(newKey[-4], 16) ^ int(temp, 16)
        newKey.append(hex(toAdd)[2:])
        keySize+=1

    return newKey

#Takes in a list in flat list notation, and returns a 2d matrix corresponding to the state vector
def matrixRepr(state):
    state_matrix = []
    for i in range(0,len(state) + 1, 4):
        state_matrix.append(state[i-4:i])
    state_matrix = state_matrix[1:]
    return list(zip(*state_matrix))


def AES_Decrypt(text, key):
    #we always assume we have the correct length of text/key supplied to this function
    numRounds = 10
    state = text[:16]
    expandedKey = KeyExpansion(key)
    state = addRoundKey(state, roundKey(expandedKey[numRounds*4:numRounds*4+4]))
    state = InvShiftRows(state)
    state = InvSubBytes(state)
    roundedKey = roundKey(expandedKey[numRounds*4-4:numRounds*4])
    state = addRoundKey(state, roundedKey)
    for i in range(numRounds - 1,0,-1):
        state = InvMixColumns(state)
        state = InvShiftRows(state)
        state = InvSubBytes(state)
        roundedKey = roundKey(expandedKey[i*4:i*4+4])
        addRoundKey(state, roundedKey)

    state = InvShiftRows(state)
    state = InvSubBytes(state)
    roundedKey = roundKey(expandedKey[:4])
    state = addRoundKey(state, roundedKey)
    return state


def AES_Encrypt(text, key):
    #we always assume we have the correct length of text/key supplied to this function
    numRounds = 10
    #make sure we are working with blocks of length 16
    state = text[:16]
    #run the key scheduling algorithm for our selected key
    expandedKey = KeyExpansion(key)
    #perform the initial addRoundKey() before we enter the main algorithm
    state = addRoundKey(state, roundKey(expandedKey[:4]))
    for i in range(1,numRounds):
        #Functions to generate the new states for each block based on the algorithm in the book
        #tested and fully working using the example in Appendix B
        state = SubBytes(state)
        state = ShiftRows(state)
        state = MixColumns(state)
        roundedKey = roundKey(expandedKey[i*4:i*4+4])
        addRoundKey(state, roundedKey)

    #Performs the last step of the encryption but omitting mixcolumns as specifiedd in the book
    state = SubBytes(state)
    state = ShiftRows(state)
    roundedKey = roundKey(expandedKey[numRounds*4:numRounds*4+4])
    state = addRoundKey(state, roundedKey)
    return state

#Prints the flat_list in matrix form according to the specified format
def printBlock(state):
    for i in range(4):
        for j in range(4):
            print(hex(state[i + (4*j)])[2:], end=" ")
        print()


#Returns the hex representation of each byte in order to be easily used within the AES_ENCRYPT function
def byteRepr(byteList):
    newBytes = []
    for byte in byteList:
        b = (int.from_bytes(byte, byteorder="little"))
        newBytes.append(int(hex(b),16))
    
    return newBytes


def main():
    global S_BOX, AES_KEY
    infile = "Q3eText.txt"
    outfile = open("ANDERSONQ5.aes", 'w')
    myKey = [0x01, 0x02, 0x05, 0x02, 0x03, 0x09, 0x01, 0x05, 0x01, 0x02, 0x05, 0x02, 0x03, 0x09, 0x01, 0x05]
    
    #Reads in the file into 16 bit blocks into a list
    with open(infile, 'rb') as f:
        byte=[]
        byteList = []
        sbyte=1
        while sbyte:
            byte=[]
            for i in range(16):
                sbyte = f.read(1)
                byte.append(sbyte)
            byteList.append(byteRepr(byte))
    
    enc = []
    #Iterate through the 16 bit byetlist to call AES for each of the 16 bit blocks
    for block in byteList:
        enc.append(AES_Encrypt(block, myKey))
            
    
    for block in enc:
        for hexChar in block:
            outfile.write(chr(hexChar))
        
if __name__ == "__main__":
   main()
